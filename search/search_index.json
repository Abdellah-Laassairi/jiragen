{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JiraGen: AI-Powered JIRA Issue Generation","text":"<p>JiraGen is a powerful command-line tool that leverages AI to generate high-quality JIRA issues with context from your codebase. It streamlines the issue creation process by automatically extracting relevant metadata and providing an interactive workflow for issue refinement.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>AI-Powered Generation: Uses advanced language models (OpenAI GPT-4 by default) to generate detailed issue descriptions</li> <li>Codebase Context: Incorporates relevant code snippets and documentation from your codebase</li> <li>Interactive Workflow: Edit content and metadata before uploading</li> <li>Smart Metadata: Automatically extracts issue type, priority, labels, and components</li> <li>JIRA Integration: Seamlessly upload issues to your JIRA instance</li> <li>Fast &amp; Efficient: Vector store-based search for quick context retrieval</li> <li>Template Support: Customizable templates for consistent issue format</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Install JiraGen:</li> </ol> <pre><code>pip install jiragen\n</code></pre> <ol> <li>Initialize in your project:</li> </ol> <pre><code>jiragen init\n</code></pre> <ol> <li>Add your codebase to the vector store:</li> </ol> <pre><code>jiragen add .\n</code></pre> <ol> <li>Generate a issue:</li> </ol> <pre><code>jiragen generate \"Add dark mode support\" --upload\n</code></pre>"},{"location":"#example-usage","title":"Example Usage","text":""},{"location":"#basic-issue-generation","title":"Basic issue Generation","text":"<pre><code># Generate a issue with default settings\njiragen generate \"Implement user authentication\"\n\n# Generate and upload with automatic metadata\njiragen generate \"Fix memory leak in worker process\" --upload --yes\n\n# Use custom model and template (check LiteLLM docs for available models)\njiragen generate \"Add OAuth support\" --model openai/gpt-4o --template feature.md\n</code></pre>"},{"location":"#interactive-features","title":"Interactive Features","text":"<ul> <li>Edit generated content in your preferred editor</li> <li>Review and modify extracted metadata</li> <li>Confirm before uploading to JIRA</li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<p>JiraGen can be configured through:</p> <ul> <li>Command-line arguments</li> <li>Configuration file (<code>~/.jiragen/config.ini</code>)</li> <li>Environment variables</li> </ul> <p>See the Getting Started guide for detailed configuration instructions.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started Guide</li> <li>CLI Reference</li> <li>API Documentation</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Check out our Contributing Guide to get started.</p>"},{"location":"#license","title":"License","text":"<p>JiraGen is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"cli/","title":"CLI Reference","text":"<pre><code>jiragen [command] [options] [arguments]\n</code></pre>"},{"location":"cli/#global-options","title":"Global Options","text":"<ul> <li><code>--verbose</code>: Enable detailed logging</li> <li><code>--config PATH</code>: Specify custom config file location</li> <li><code>--help</code>: Display command help</li> </ul>"},{"location":"cli/#commands","title":"Commands","text":""},{"location":"cli/#init","title":"init","text":"<p>Initialize JiraGen configuration and create necessary directories.</p> <pre><code>jiragen init\n</code></pre> <p>This command will initialize the configuration file.</p>"},{"location":"cli/#generate","title":"generate","text":"<p>Generate JIRA tickets using AI with context from your codebase.</p> <pre><code>jiragen generate MESSAGE [OPTIONS]\n\nArguments:\n  MESSAGE              : Description of the ticket to generate\n\nOptions:\n  -t, --template PATH : Path to template file (default: bundled default.md)\n  -m, --model NAME    : LLM model to use (default: openai/gpt-4o)\n  --temperature FLOAT : Model temperature (0.0-1.0) (default: 0.7)\n  --max-tokens INT    : Maximum number of tokens to generate (default: 2000)\n  -e, --editor       : Open editor for manual editing\n  -u, --upload       : Upload ticket to JIRA after generation\n  -y, --yes          : Skip all confirmations and use defaults\n</code></pre> <p>The generate command now supports an interactive workflow:</p> <ol> <li>Content Generation:</li> <li>Generates ticket content using AI</li> <li>Opens in editor for manual modifications (unless <code>-y</code> is used)</li> <li> <p>Displays the final content</p> </li> <li> <p>Metadata Extraction:</p> </li> <li>Automatically extracts metadata like issue type, priority, labels</li> <li>Shows extracted metadata for review</li> <li> <p>Allows interactive modification (unless <code>-y</code> is used)</p> </li> <li> <p>JIRA Upload (with <code>-u</code> flag):</p> </li> <li>Confirms before upload (unless <code>-y</code> is used)</li> <li>Validates components and other fields</li> <li>Shows upload status and issue link</li> </ol> <p>Example usage:</p> <pre><code># Generate ticket with default settings\njiragen generate \"Add user authentication feature\"\n\n# Generate and upload to JIRA with confirmation\njiragen generate \"Implement OAuth2\" --upload\n\n# Generate and upload with custom model, skipping all confirmations\njiragen generate \"Fix memory leak\" --model openai/gpt-4 --upload --yes\n\n# Generate with custom template and manual editing\njiragen generate \"Add dark mode\" --template feature.md --editor\n</code></pre> <p>Interactive metadata editing example: <pre><code>Generated Metadata:\nIssue Type: Task\nPriority: High\nLabels: frontend, UI, dark-mode\nStory Points: 5\nComponents: UI\n\nWould you like to modify the metadata? [y/N]:\n</code></pre></p> <p>Upload confirmation example: <pre><code>Do you want to upload this issue to JIRA? [Y/n]:\n\u2713 Successfully created Jira issue: https://your-domain.atlassian.net/browse/PROJ-123\n</code></pre></p>"},{"location":"cli/#fetch","title":"fetch","text":"<p>Fetch JIRA data and store it in a separate vector store. The command will display a progress bar while fetching and show detailed statistics upon completion.</p> <pre><code>jiragen fetch [OPTIONS]\n\nOptions:\n  --types TYPE [TYPE...]  : Types of data to fetch (default: tickets, epics)\n                           Available types: epics, tickets, components\n                           Use 'all' to fetch everything\n</code></pre> <p>Example usage:</p> <pre><code># Fetch all JIRA data types\njiragen fetch --types all\n\n# Fetch specific types\njiragen fetch --types epics tickets\n</code></pre> <p>Output example:</p> <pre><code>    JIRA Fetch Statistics\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Type       \u2503 Items Fetched \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Epics      \u2502            12 \u2502\n\u2502 Tickets    \u2502           156 \u2502\n\u2502 Components \u2502             8 \u2502\n\u2502 Total      \u2502           176 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Summary \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                  \u2502\n\u2502 \u2728 Fetch completed successfully!  \u2502\n\u2502 \u23f1\ufe0f  Time taken: 5.23 seconds      \u2502\n\u2502 \ud83d\udcc1 Data stored in: .jiragen/jira_data \u2502\n\u2502                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The fetched data is stored in the runtime directory followed by <code>jira_data</code>, organized by type:</p> <ul> <li><code>jira_data/epics/</code></li> <li><code>jira_data/tickets/</code></li> <li><code>jira_data/components/</code></li> </ul> <p>Each item is stored in both JSON and Markdown formats for easy viewing and processing.</p>"},{"location":"cli/#status","title":"status","text":"<p>Display status of files in the vector store database.</p> <pre><code>jiragen status [OPTIONS]\n\nOptions:\n  --compact           : Show compact view with file counts\n  --depth INT        : Maximum depth of directory tree to display\n</code></pre>"},{"location":"cli/#add","title":"add","text":"<p>Add files to the vector store database. Supports .gitignore patterns and recursive directory scanning.</p> <pre><code>jiragen add PATH [PATH...]\n\nArguments:\n  PATH               : One or more files or directories to add to the database\n                      Use \".\" to add all files in current directory recursively\n                      Use \"*\" to add all files in current directory only\n                      Use specific paths for individual files or directories\n\nExamples:\n# Add all files recursively (respects .gitignore)\njiragen add .\n\n# Add specific files\njiragen add src/main.py tests/test_api.py\n\n# Add all files in a specific directory\njiragen add src/\n\n# Add all Python files in current directory\njiragen add *.py\n</code></pre> <p>The command will: 1. Respect .gitignore patterns when scanning for files 2. Show a progress bar during processing 3. Display a tree view of added files 4. Show processing statistics (files/second) 5. Skip directories and only process files</p> <p>Output example: <pre><code>\ud83d\udcc1 Added Files\n\u251c\u2500\u2500 src/main.py\n\u251c\u2500\u2500 src/utils/helper.py\n\u2514\u2500\u2500 tests/test_api.py\n\nSuccessfully added 3 files (52.7 files/second)\n</code></pre></p>"},{"location":"cli/#rm-remove","title":"rm (remove)","text":"<p>Remove files from the vector store database.</p> <pre><code>jiragen rm PATH [PATH...]\n\nArguments:\n  PATH               : One or more files to remove from the database\n</code></pre>"},{"location":"cli/#restart","title":"restart","text":"<p>Restart the vector store service. Useful when you need to reset the database connection.</p> <pre><code>jiragen restart\n</code></pre>"},{"location":"cli/#upload","title":"upload","text":"<p>Upload Jira issues directly from the command line. Supports all issue types (Story, Bug, Task, Epic, etc.) and includes markdown to Jira markup conversion.</p> <pre><code>jiragen upload [OPTIONS]\n\nRequired Options:\n  --title TEXT       : Issue title/summary\n\nOptional Options:\n  --description TEXT : Issue description (supports markdown format)\n  --type TEXT       : Issue type (Story, Bug, Task, Epic, etc.) (default: Story)\n  --epic KEY        : Epic key to link the issue to (e.g., ODT-123)\n  --component TEXT  : Component name to assign\n  --priority TEXT   : Priority level (Highest, High, Medium, Low, Lowest)\n  --labels TEXT     : Comma-separated list of labels\n  --assignee TEXT   : Username of the assignee\n  --reporter TEXT   : Username of the reporter\n</code></pre> <p>Example usage:</p> <pre><code># Create a basic story\njiragen upload --title \"Implement user authentication\"\n\n# Create a high-priority bug with labels\njiragen upload \\\n  --title \"Fix login page crash\" \\\n  --type Bug \\\n  --priority High \\\n  --labels \"bug,urgent\" \\\n  --assignee \"john.doe\"\n\n# Create an epic with markdown description\njiragen upload \\\n  --title \"Q1 Feature Set\" \\\n  --type Epic \\\n  --description \"# Q1 Features\\n\\n## Goals\\n- Implement OAuth\\n- Add user profiles\\n\\n## Timeline\\n1. January: Planning\\n2. February: Development\\n3. March: Testing\"\n\n# Create a story linked to an epic\njiragen upload \\\n  --title \"Add OAuth integration\" \\\n  --description \"## Overview\\nImplement OAuth2 authentication\\n\\n## Tasks\\n- [ ] Research providers\\n- [ ] Design flow\\n- [ ] Implement\" \\\n  --epic ODT-123 \\\n  --component \"Authentication\" \\\n  --priority \"Medium\" \\\n  --labels \"feature,auth\"\n</code></pre> <p>The upload command will: - Convert markdown formatting to Jira markup - Validate all inputs (epic, component, priority) before creating the issue - Handle epic links appropriately (disabled when creating epics) - Use project configuration from your jiragen config file</p>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>Configure JiraGen behavior through environment variables:</p> <pre><code>JIRAGEN_CONFIG_PATH      # Custom config file location\nJIRAGEN_MODEL           # Default LLM model\nJIRAGEN_API_BASE        # Ollama API endpoint\nJIRAGEN_TEMPLATE_DIR    # Template directory path\n</code></pre>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code>: Success</li> <li><code>1</code>: General error or operation cancelled by user</li> </ul>"},{"location":"cli/#data-storage","title":"Data Storage","text":"<p>JiraGen stores its data following the XDG Base Directory specification:</p>"},{"location":"cli/#unix-like-systems-linux-macos","title":"Unix-like Systems (Linux, macOS)","text":"<pre><code>~/.config/jiragen/           # Configuration directory\n\u2514\u2500\u2500 config.ini              # Main configuration file\n</code></pre>"},{"location":"code-of-conduct/","title":"Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and innovative environment, we pledge to make participation in our project and community a harassment-free experience for everyone.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include: - Using welcoming and inclusive language - Encouraging collaboration on AI-driven solutions and respecting differing viewpoints</p>"},{"location":"code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces and in public spaces when an individual is representing the project or its community.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This document outlines the configuration settings and directory structure for the Jiragen project.</p>"},{"location":"configuration/#directory-structure","title":"Directory Structure","text":"<p>Jiragen follows the XDG Base Directory specification for storing configuration and data files:</p>"},{"location":"configuration/#unix-like-systems-linux-macos","title":"Unix-like Systems (Linux, macOS)","text":"<pre><code>~/.config/jiragen/           # Configuration directory\n\u2514\u2500\u2500 config.ini              # Main configuration file\n\n~/.local/share/jiragen/     # Data directory\n\u251c\u2500\u2500 vector_store/          # Vector database storage\n\u2514\u2500\u2500 jiragen.log           # Application logs\n</code></pre>"},{"location":"configuration/#windows","title":"Windows","text":"<pre><code>%APPDATA%\\jiragen\\          # Configuration directory\n\u2514\u2500\u2500 config.ini              # Main configuration file\n\n%LOCALAPPDATA%\\jiragen\\     # Data directory\n\u251c\u2500\u2500 vector_store/          # Vector database storage\n\u2514\u2500\u2500 jiragen.log           # Application logs\n</code></pre>"},{"location":"configuration/#configuration-file","title":"Configuration File","text":"<p>The <code>config.ini</code> file contains three main sections:</p>"},{"location":"configuration/#jira-configuration","title":"JIRA Configuration","text":"<pre><code>[JIRA]\nurl = https://your-domain.atlassian.net\nusername = your-email@example.com\napi_token = your-api-token\ndefault_project = PROJECT\ndefault_assignee = username\n</code></pre>"},{"location":"configuration/#llm-configuration","title":"LLM Configuration","text":"<pre><code>[llm]\nmodel = openai/gpt-4o\napi_base = https://api.openai.com/v1\napi_token = your-api-token\ntemperature = 0.7\nmax_tokens = 2000\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>You can configure Jiragen using environment variables:</p>"},{"location":"configuration/#jira-settings","title":"JIRA Settings","text":"<ul> <li><code>JIRAGEN_URL</code>: The URL of the JIRA instance</li> <li><code>JIRAGEN_USERNAME</code>: The username for JIRA authentication</li> <li><code>JIRAGEN_API_TOKEN</code>: The API token for accessing JIRA</li> <li><code>JIRAGEN_DEFAULT_PROJECT</code>: The default project key in JIRA</li> <li><code>JIRAGEN_DEFAULT_ASSIGNEE</code>: The default assignee for created issues</li> </ul>"},{"location":"configuration/#llm-settings","title":"LLM Settings","text":"<ul> <li><code>JIRAGEN_LLM_MODEL</code>: The LLM model to use</li> <li><code>JIRAGEN_LLM_TEMPERATURE</code>: Temperature setting for the LLM</li> <li><code>JIRAGEN_LLM_MAX_TOKENS</code>: Maximum tokens for LLM responses</li> </ul>"},{"location":"configuration/#vector-store-settings","title":"Vector Store Settings","text":"<ul> <li><code>JIRAGEN_VECTOR_STORE_PATH</code>: Custom path for vector store data</li> </ul>"},{"location":"configuration/#directory-overrides","title":"Directory Overrides","text":"<ul> <li><code>XDG_CONFIG_HOME</code>: Override default config directory (Unix-like systems)</li> <li><code>XDG_DATA_HOME</code>: Override default data directory (Unix-like systems)</li> <li><code>APPDATA</code>: Override config directory (Windows)</li> <li><code>LOCALAPPDATA</code>: Override data directory (Windows)</li> </ul>"},{"location":"configuration/#configuration-precedence","title":"Configuration Precedence","text":"<p>The configuration values are loaded in the following order (later values override earlier ones):</p> <ol> <li>Default values from config file</li> <li>Environment variables</li> <li>Command-line arguments (when applicable)</li> </ol>"},{"location":"configuration/#initialization","title":"Initialization","text":"<p>When running <code>jiragen init</code>, you'll be prompted to configure all sections. You can: - Enter values manually - Press Enter to accept defaults - Use environment variables to pre-populate values</p> <p>Example: <pre><code>$ jiragen init\n\nJIRA Configuration:\nJIRA URL (e.g., https://your-domain.atlassian.net):\nUsername (usually your email):\nAPI Token:\nDefault Project Key:\nDefault Assignee:\n\nLLM Configuration:\nModel name (default: openai/gpt-4o):\nTemperature (0.0-1.0, default: 0.7):\nMaximum tokens (default: 2000):\n</code></pre></p> <p>you can also specify a config file path with the --config flag</p> <pre><code>$ jiragen generate --config /path/to/config.ini\n</code></pre>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Thank you for considering contributing to Jiragen! Your efforts help automate JIRA issue creation using cutting-edge Local LLMs.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Fork the repository and create a feature branch.</li> <li>Focus on enhancing LLM integration or improving issue generation accuracy.</li> <li>Submit a pull request with detailed explanations of your changes.</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines and ensure all code changes are covered by unit tests.</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Use the issue tracker to report bugs or request features related to LLM performance or JIRA integration.</li> </ul> <p>We appreciate your contributions and efforts to enhance the capabilities of Jiragen!</p>"},{"location":"development/","title":"Development Guide","text":"<p>This guide provides instructions for setting up a development environment and contributing to the project.</p>"},{"location":"development/#setting-up","title":"Setting Up","text":"<ul> <li>Clone the repository.</li> <li>Install dependencies using <code>pip install -e .</code></li> </ul>"},{"location":"development/#running-tests","title":"Running Tests","text":"<ul> <li>Use <code>tox</code> to run tests across different environments.</li> </ul>"},{"location":"development/#code-standards","title":"Code Standards","text":"<ul> <li>Follow PEP 8 guidelines.</li> <li>Ensure all code is covered by unit tests.</li> </ul> <p>Thank you for contributing to this project!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with JiraGen.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>First, install Jiragen using pip:</p> <pre><code>pip install jiragen\n</code></pre>"},{"location":"getting-started/#initial-setup","title":"Initial Setup","text":""},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>Run the initialization command to set up Jiragen:</p> <pre><code>jiragen init\n</code></pre> <p>This will: 1. Create the necessary directories following XDG Base Directory specification:    - Configuration directory:      - Linux/macOS: <code>~/.config/jiragen/</code>      - Windows: <code>%APPDATA%\\jiragen\\</code>    - Data directory:      - Linux/macOS: <code>~/.local/share/jiragen/</code>      - Windows: <code>%LOCALAPPDATA%\\jiragen\\</code> 2. Guide you through configuring:    - JIRA connection settings    - LLM preferences</p> <p>You can accept the defaults by pressing Enter or customize each setting.</p>"},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":"<p>For automated setup, you can use environment variables:</p> <pre><code># JIRA Settings\nexport JIRAGEN_URL=\"https://your-domain.atlassian.net\"\nexport JIRAGEN_USERNAME=\"your-email@example.com\"\nexport JIRAGEN_API_TOKEN=\"your-api-token\"\nexport JIRAGEN_DEFAULT_PROJECT=\"PROJECT\"\nexport JIRAGEN_DEFAULT_ASSIGNEE=\"username\"\n\n# LLM Settings\nexport JIRAGEN_LLM_MODEL=\"gpt-4\"\nexport JIRAGEN_LLM_TEMPERATURE=\"0.7\"\nexport JIRAGEN_LLM_MAX_TOKENS=\"2000\"\n\n# Optional: Custom paths\nexport XDG_CONFIG_HOME=\"~/.config\"      # Unix-like systems\nexport XDG_DATA_HOME=\"~/.local/share\"   # Unix-like systems\n</code></pre>"},{"location":"getting-started/#configuration_1","title":"Configuration","text":""},{"location":"getting-started/#1-initialize-jiragen","title":"1. Initialize JiraGen","text":"<p>First, initialize JiraGen:</p> <pre><code>jiragen init\n</code></pre> <p>This will create the following directory structure following the XDG Base Directory specification:</p> <p>Unix-like Systems (Linux, macOS): <pre><code>~/.config/jiragen/           # Configuration directory\n\u251c\u2500\u2500 config.ini              # Main configuration file\n\u2514\u2500\u2500 templates/             # Custom templates\n    \u2514\u2500\u2500 default.md\n\n~/.local/share/jiragen/     # Data directory\n\u251c\u2500\u2500 vector_store/          # Vector database storage\n\u251c\u2500\u2500 jira_data/            # JIRA fetched data\n\u2502   \u251c\u2500\u2500 epics/           # Epic data\n\u2502   \u251c\u2500\u2500 tickets/         # Ticket data\n\u2502   \u2514\u2500\u2500 components/      # Component data\n\u2514\u2500\u2500 jiragen.log          # Application logs\n</code></pre></p> <p>Windows: <pre><code>%APPDATA%\\jiragen\\          # Configuration directory\n\u251c\u2500\u2500 config.ini              # Main configuration file\n\u2514\u2500\u2500 templates/             # Custom templates\n    \u2514\u2500\u2500 default.md\n\n%LOCALAPPDATA%\\jiragen\\     # Data directory\n\u251c\u2500\u2500 vector_store/          # Vector database storage\n\u251c\u2500\u2500 jira_data/            # JIRA fetched data\n\u2502   \u251c\u2500\u2500 epics/           # Epic data\n\u2502   \u251c\u2500\u2500 tickets/         # Ticket data\n\u2502   \u2514\u2500\u2500 components/      # Component data\n\u2514\u2500\u2500 jiragen.log          # Application logs\n</code></pre></p>"},{"location":"getting-started/#2-configure-jira-settings","title":"2. Configure JIRA Settings","text":"<p>Edit the configuration file (<code>~/.config/jiragen/config.ini</code> on Unix-like systems or <code>%APPDATA%\\jiragen\\config.ini</code> on Windows):</p> <pre><code>[jira]\nurl = https://your-domain.atlassian.net\nusername = your-email@example.com\napi_token = your-api-token\ndefault_project = PROJECT\ndefault_assignee = username\n\n[llm]\nmodel = gpt-4\ntemperature = 0.7\nmax_tokens = 2000\n</code></pre> <p>You can also use environment variables: <pre><code>export JIRA_URL=https://your-domain.atlassian.net\nexport JIRA_USERNAME=your-email@example.com\nexport JIRA_API_TOKEN=your-api-token\n</code></pre></p>"},{"location":"getting-started/#3-add-your-codebase","title":"3. Add Your Codebase","text":"<p>Index your codebase to provide context for ticket generation:</p> <pre><code>jiragen add .\n</code></pre> <p>This will: 1. Scan your codebase recursively 2. Respect .gitignore patterns (skipping ignored files) 3. Create embeddings for relevant files 4. Store them in the vector store</p> <p>You can also: - Add specific files: <code>jiragen add src/main.py tests/test_api.py</code> - Add a specific directory: <code>jiragen add src/</code> - Add files matching a pattern: <code>jiragen add *.py</code></p> <p>The command will show: - Progress bar during processing - Tree view of added files - Processing statistics (files/second)</p> <p>Example output: <pre><code>\ud83d\udcc1 Added Files\n\u251c\u2500\u2500 src/main.py\n\u251c\u2500\u2500 src/utils/helper.py\n\u2514\u2500\u2500 tests/test_api.py\n\nSuccessfully added 3 files (52.7 files/second)\n</code></pre></p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#generate-a-ticket","title":"Generate a Ticket","text":"<pre><code>jiragen generate \"Add dark mode support\"\n</code></pre> <p>This will: 1. Search your staged jira data and codebase content for relevant context 2. Generate a detailed ticket description 3. Open it in your editor for review 4. Extract metadata (issue type, priority, labels)</p>"},{"location":"getting-started/#generate-and-upload","title":"Generate and Upload","text":"<pre><code>jiragen generate \"Add dark mode support\" --upload\n</code></pre> <p>This will: 1. Generate the ticket content 2. Show extracted metadata for review 3. Upload to JIRA after confirmation</p>"},{"location":"getting-started/#automated-pipeline","title":"Automated Pipeline","text":"<pre><code>jiragen generate \"Add dark mode support\" --upload --yes\n</code></pre> <p>This will: 1. Generate the ticket 2. Extract metadata 3. Upload to JIRA without confirmation</p>"},{"location":"getting-started/#templates","title":"Templates","text":""},{"location":"getting-started/#default-template","title":"Default Template","text":"<p>JiraGen comes with a default template that structures tickets with: - Description - Acceptance Criteria - Technical Details - Implementation Notes</p>"},{"location":"getting-started/#custom-templates","title":"Custom Templates","text":"<p>Create custom templates in the templates directory: - Unix-like: <code>~/.config/jiragen/templates/</code> - Windows: <code>%APPDATA%\\jiragen\\templates\\</code></p> <pre><code># {title}\n\n## Description\n{description}\n\n## Implementation Plan\n- [ ] Task 1\n- [ ] Task 2\n\n## Technical Requirements\n{technical_details}\n\n## Testing Strategy\n- Unit Tests\n- Integration Tests\n- E2E Tests\n</code></pre> <p>Use your template: <pre><code>jiragen generate \"Feature request\" --template custom.md\n</code></pre></p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the CLI Reference for detailed command options</li> <li>Explore the API Documentation for programmatic usage</li> <li>Learn about Contributing</li> </ul>"},{"location":"templates/","title":"Templates","text":"<p>JiraGen uses templates to structure generated JIRA issues consistently. This guide covers template usage, customization, and best practices.</p>"},{"location":"templates/#default-templates","title":"Default Templates","text":"<p>JiraGen comes with several built-in templates:</p>"},{"location":"templates/#standard-issue-template-defaultmd","title":"Standard Issue Template (<code>default.md</code>)","text":"<pre><code># {title}\n\n## Description\n{description}\n\n## Acceptance Criteria\n- [ ] {criteria_1}\n- [ ] {criteria_2}\n- [ ] {criteria_3}\n\n## Technical Details\n{technical_details}\n\n## Implementation Notes\n- {note_1}\n- {note_2}\n</code></pre>"},{"location":"templates/#bug-report-template-bugmd","title":"Bug Report Template (<code>bug.md</code>)","text":"<pre><code># {title}\n\n## Description\n{description}\n\n## Steps to Reproduce\n1. {step_1}\n2. {step_2}\n3. {step_3}\n\n## Expected Behavior\n{expected}\n\n## Actual Behavior\n{actual}\n\n## Technical Details\n- Environment: {environment}\n- Version: {version}\n- Browser/Device: {browser}\n\n## Possible Solution\n{solution}\n</code></pre>"},{"location":"templates/#feature-request-template-featuremd","title":"Feature Request Template (<code>feature.md</code>)","text":"<pre><code># {title}\n\n## Description\n{description}\n\n## User Story\nAs a {user_type}\nI want to {action}\nSo that {benefit}\n\n## Acceptance Criteria\n- [ ] {criteria_1}\n- [ ] {criteria_2}\n- [ ] {criteria_3}\n\n## Technical Approach\n{technical_approach}\n\n## Dependencies\n- {dependency_1}\n- {dependency_2}\n</code></pre>"},{"location":"templates/#custom-templates","title":"Custom Templates","text":""},{"location":"templates/#creating-templates","title":"Creating Templates","text":"<ol> <li>Create a new markdown file in your templates directory:</li> <li>Unix-like: <code>~/.config/jiragen/templates/</code></li> <li> <p>Windows: <code>%APPDATA%\\jiragen\\templates/</code></p> </li> <li> <p>Use template variables:</p> </li> <li><code>{title}</code>: Issue title</li> <li><code>{description}</code>: AI-generated description</li> <li><code>{technical_details}</code>: Technical implementation details</li> <li>Custom variables: Define any variable with <code>{variable_name}</code></li> </ol>"},{"location":"templates/#template-variables","title":"Template Variables","text":"<p>Variables are replaced with AI-generated content or user-provided values:</p> <pre><code># {title}\n\n## Overview\n{description}\n\n## Custom Section\n{my_custom_variable}\n</code></pre>"},{"location":"templates/#using-custom-templates","title":"Using Custom Templates","text":"<pre><code># Use a specific template\njiragen generate \"Add dark mode\" --template feature.md\n\n# Use a custom template\njiragen generate \"Fix memory leak\" --template custom/bug_report.md\n</code></pre>"},{"location":"templates/#template-best-practices","title":"Template Best Practices","text":"<ol> <li>Structure:</li> <li>Use clear headings</li> <li>Include acceptance criteria</li> <li>Add technical details section</li> <li> <p>Consider adding checklists</p> </li> <li> <p>Variables:</p> </li> <li>Use descriptive names</li> <li>Document custom variables</li> <li> <p>Keep optional sections modular</p> </li> <li> <p>Formatting:</p> </li> <li>Use markdown for consistency</li> <li>Include code block templates where needed</li> <li> <p>Consider JIRA markup compatibility</p> </li> <li> <p>Sections to Consider:</p> </li> <li>Description/Overview</li> <li>Acceptance Criteria</li> <li>Technical Details</li> <li>Dependencies</li> <li>Testing Requirements</li> <li>Documentation Needs</li> </ol>"},{"location":"api/","title":"API Reference","text":"<p>JiraGen provides a Python API for programmatic access to its functionality. This section covers the core modules and their usage.</p>"},{"location":"api/#core-modules","title":"Core Modules","text":"<ul> <li><code>jiragen.core</code>: Core functionality and base classes</li> <li><code>jiragen.services</code>: Integration services (JIRA, Vector Store)</li> <li><code>jiragen.cli</code>: Command-line interface implementation</li> <li><code>jiragen.utils</code>: Utility functions and helpers</li> </ul>"},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>from jiragen import JiraGen\nfrom jiragen.core import Generator\nfrom jiragen.services import JiraClient\n\n# Initialize JiraGen\njira_gen = JiraGen()\n\n# Generate an issue\nissue = jira_gen.generate(\n    title=\"Add dark mode support\", template=\"feature.md\", model=\"gpt-4\", temperature=0.7\n)\n\n# Upload to JIRA\nissue_key = jira_gen.upload(issue)\nprint(f\"Created issue: {issue_key}\")\n</code></pre>"},{"location":"api/#configuration","title":"Configuration","text":"<pre><code>from jiragen import Config\n\n# Load configuration\nconfig = Config.load()\n\n# Update settings\nconfig.jira.url = \"https://your-domain.atlassian.net\"\nconfig.jira.username = \"your-email@example.com\"\nconfig.jira.api_token = \"your-api-token\"\n\n# Save changes\nconfig.save()\n</code></pre>"},{"location":"api/#vector-store-operations","title":"Vector Store Operations","text":"<pre><code>from jiragen.services import VectorStore\n\n# Initialize vector store\nstore = VectorStore()\n\n# Add files\nstore.add_files([\"src/main.py\", \"tests/test_api.py\"])\n\n# Search for context\nresults = store.search(\"authentication implementation\", limit=5)\n</code></pre> <p>See the following sections for detailed documentation on each module.</p>"},{"location":"api/cli/","title":"CLI API Reference","text":"<p>This section documents the command-line interface components of JiraGen. These components provide the user-facing functionality for ticket generation, metadata handling, and JIRA integration.</p>"},{"location":"api/cli/#generate-command","title":"Generate Command","text":"<p>Overview</p> <p>The Generate command creates JIRA tickets using AI, with support for interactive editing and metadata modification.</p> <p>Usage Example</p> <pre><code>from jiragen.cli.generate import generate_issue\nfrom jiragen.core.client import VectorStoreClient\n\n# Initialize vector store\nstore = VectorStoreClient()\n\n# Generate a ticket\nresult = generate_issue(\n    store=store,\n    message=\"Add dark mode support\",\n    model=\"openai/gpt-4o\",\n    upload=True,\n    yes=False,  # Enable interactive mode\n)\n</code></pre>"},{"location":"api/cli/#generate_issue","title":"generate_issue","text":""},{"location":"api/cli/#jiragen.cli.generate.generate_issue","title":"jiragen.cli.generate.generate_issue","text":"<pre><code>generate_issue(store: VectorStoreClient, message: str, template_path: str, model: Optional[str] = None, temperature: Optional[float] = None, max_tokens: Optional[int] = None, upload: bool = False, yes: bool = False) -&gt; Optional[Dict[str, Any]]\n</code></pre> <p>Generate JIRA issue content and metadata using AI.</p>"},{"location":"api/cli/#open_in_neovim","title":"open_in_neovim","text":"<p>Editor Integration</p> <p>The <code>open_in_neovim</code> function provides seamless integration with Neovim for content editing. Make sure Neovim is installed and configured properly.</p>"},{"location":"api/cli/#jiragen.cli.nvim.open_in_neovim","title":"jiragen.cli.nvim.open_in_neovim","text":"<pre><code>open_in_neovim(content: str) -&gt; Optional[str]\n</code></pre> <p>Open content in Neovim with markdown preview if available.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>str</code>)           \u2013            <p>Initial content to edit</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[str]</code>           \u2013            <p>Optional[str]: Modified content if saved, None if canceled</p> </li> </ul>"},{"location":"api/cli/#add-command","title":"Add Command","text":"<p>Overview</p> <p>The Add command indexes your codebase into the vector store for context-aware ticket generation. It supports recursive directory scanning and respects .gitignore patterns.</p> <p>Large Codebases</p> <p>For large codebases, the indexing process may take some time. The command shows a progress bar and provides detailed statistics upon completion.</p> <p>Gitignore Support</p> <p>The command automatically respects .gitignore patterns in your repository. This includes: - Standard .gitignore patterns - Custom patterns in your repository's .gitignore - Common version control directories (.git)</p>"},{"location":"api/cli/#add_files_command","title":"add_files_command","text":"<p>The main function that handles adding files to the vector store. It provides: - Recursive directory scanning - .gitignore pattern support - Progress tracking - File processing statistics - Tree view of added files</p> <pre><code>def add_files_command(store, paths: List[str]) -&gt; None:\n    \"\"\"Add files to the vector database, respecting .gitignore patterns.\n\n    Args:\n        store: The vector store client instance\n        paths: List of file paths to add. Can include:\n               - Individual files\n               - Directories (will be scanned recursively)\n               - Glob patterns (\"*\", \"**\", etc.)\n    \"\"\"\n</code></pre>"},{"location":"api/cli/#usage-examples","title":"Usage Examples","text":"<pre><code>from jiragen.cli.add import add_files_command\nfrom jiragen.core.client import VectorStoreClient\n\n# Initialize vector store\nstore = VectorStoreClient()\n\n# Add all files in current directory (respects .gitignore)\nadd_files_command(store, [\".\"])\n\n# Add specific files\nadd_files_command(store, [\"src/main.py\", \"tests/test_api.py\"])\n\n# Add all files in a directory\nadd_files_command(store, [\"src/\"])\n</code></pre>"},{"location":"api/cli/#init-command","title":"Init Command","text":"<p>Overview</p> <p>The Init command sets up JiraGen's configuration and creates necessary directories.</p> <p>Configuration</p> <p>The init process will: 1. Create the <code>.jiragen</code> directory 2. Initialize the configuration file 3. Set up the vector store 4. Configure JIRA credentials</p>"},{"location":"api/cli/#init_command","title":"init_command","text":""},{"location":"api/cli/#jiragen.cli.init.init_command","title":"jiragen.cli.init.init_command","text":"<pre><code>init_command(template_config_path: Path = None) -&gt; None\n</code></pre> <p>Initialize jiragen configuration.</p> <p>Parameters:</p> <ul> <li> <code>template_config_path</code>               (<code>Path</code>, default:                   <code>None</code> )           \u2013            <p>Path to the template configuration file. If provided,         will be used as a template for the default config at ~/.config/jiragen/config.ini</p> </li> </ul>"},{"location":"api/cli/#upload-command","title":"Upload Command","text":"<p>Overview</p> <p>The Upload command handles the creation of JIRA issues with proper metadata and content formatting.</p> <p>Usage Example</p> <pre><code>from jiragen.cli.upload import upload_command\n\n# Upload a new feature request\nissue_key = upload_command(\n    title=\"Add Dark Mode Support\",\n    description=\"# Feature Request\\n\\nImplement dark mode...\",\n    issue_type=\"Story\",\n    priority=\"High\",\n    labels=\"frontend,ui,dark-mode\",\n    component_name=\"UI\",\n)\nprint(f\"Created issue: {issue_key}\")\n</code></pre>"},{"location":"api/cli/#upload_command","title":"upload_command","text":""},{"location":"api/cli/#jiragen.cli.upload.upload_command","title":"jiragen.cli.upload.upload_command","text":"<pre><code>upload_command(title: str, description: Optional[str] = None, issue_type: str = 'Story', epic_key: Optional[str] = None, component_name: Optional[str] = None, priority: Optional[str] = None, labels: Optional[str] = None, assignee: Optional[str] = None, reporter: Optional[str] = None, custom_fields: Optional[Dict[str, Any]] = None) -&gt; Optional[str]\n</code></pre> <p>Upload a Jira issue with the provided content and options.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Issue summary/title</p> </li> <li> <code>description</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Issue description (can be in markdown format)</p> </li> <li> <code>issue_type</code>               (<code>str</code>, default:                   <code>'Story'</code> )           \u2013            <p>Type of issue (Story, Bug, Task, Epic, etc.)</p> </li> <li> <code>epic_key</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Key of the epic to link the issue to (not applicable for epics)</p> </li> <li> <code>component_name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Name of the component to assign</p> </li> <li> <code>priority</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Priority level (Highest, High, Medium, Low, Lowest)</p> </li> <li> <code>labels</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Comma-separated list of labels</p> </li> <li> <code>assignee</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Username of the assignee</p> </li> <li> <code>reporter</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Username of the reporter</p> </li> <li> <code>custom_fields</code>               (<code>Optional[Dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Dictionary of custom field IDs and values</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>Optional[str]</code> )          \u2013            <p>The key of the created issue, or None if creation failed</p> </li> </ul>"},{"location":"api/cli/#jira-integration-utilities","title":"JIRA Integration Utilities","text":"<p>Helper Functions</p> <p>The following functions help validate and format data for JIRA:</p>"},{"location":"api/cli/#read_config","title":"read_config","text":""},{"location":"api/cli/#jiragen.cli.upload.read_config","title":"jiragen.cli.upload.read_config","text":"<pre><code>read_config(config_path: Path) -&gt; Dict[str, str]\n</code></pre> <p>Read Jira configuration from config file.</p>"},{"location":"api/cli/#get_project_key","title":"get_project_key","text":""},{"location":"api/cli/#jiragen.cli.upload.get_project_key","title":"jiragen.cli.upload.get_project_key","text":"<pre><code>get_project_key(jira: JIRA, project_name: str) -&gt; Optional[str]\n</code></pre> <p>Get project key from project name.</p>"},{"location":"api/cli/#validate_component","title":"validate_component","text":""},{"location":"api/cli/#jiragen.cli.upload.validate_component","title":"jiragen.cli.upload.validate_component","text":"<pre><code>validate_component(jira: JIRA, project_key: str, component_name: Optional[str]) -&gt; Optional[str]\n</code></pre> <p>Validate component exists and return its ID.</p>"},{"location":"api/cli/#validate_epic","title":"validate_epic","text":""},{"location":"api/cli/#jiragen.cli.upload.validate_epic","title":"jiragen.cli.upload.validate_epic","text":"<pre><code>validate_epic(jira: JIRA, project_key: str, epic_key: Optional[str]) -&gt; Optional[str]\n</code></pre> <p>Validate epic exists and return its key.</p>"},{"location":"api/cli/#validate_priority","title":"validate_priority","text":""},{"location":"api/cli/#jiragen.cli.upload.validate_priority","title":"jiragen.cli.upload.validate_priority","text":"<pre><code>validate_priority(jira: JIRA, priority_name: Optional[str]) -&gt; Optional[str]\n</code></pre> <p>Validate priority exists and return its name.</p>"},{"location":"api/cli/#validate_labels","title":"validate_labels","text":""},{"location":"api/cli/#jiragen.cli.upload.validate_labels","title":"jiragen.cli.upload.validate_labels","text":"<pre><code>validate_labels(labels: Optional[str]) -&gt; list\n</code></pre> <p>Validate and format labels.</p>"},{"location":"api/cli/#convert_md_to_jira","title":"convert_md_to_jira","text":""},{"location":"api/cli/#jiragen.cli.upload.convert_md_to_jira","title":"jiragen.cli.upload.convert_md_to_jira","text":"<pre><code>convert_md_to_jira(md_text: Optional[str]) -&gt; str\n</code></pre> <p>Convert markdown text to Jira markup.</p>"},{"location":"api/core/","title":"Core API","text":"<p>The core module provides the fundamental functionality of JiraGen.</p>"},{"location":"api/core/#jiragen-class","title":"JiraGen Class","text":"<p>The main class that orchestrates all functionality.</p> <pre><code>from jiragen import JiraGen\n\n\nclass JiraGen:\n    def __init__(self, config_path: Optional[str] = None):\n        \"\"\"Initialize JiraGen with optional custom config path.\"\"\"\n\n    def generate(\n        self,\n        title: str,\n        template: Optional[str] = None,\n        model: Optional[str] = None,\n        temperature: float = 0.7,\n        max_tokens: int = 2000,\n    ) -&gt; Issue:\n        \"\"\"Generate a JIRA issue with AI assistance.\"\"\"\n\n    def upload(self, issue: Issue) -&gt; str:\n        \"\"\"Upload an issue to JIRA and return the issue key.\"\"\"\n\n    def add_files(self, paths: List[str]) -&gt; int:\n        \"\"\"Add files to the vector store.\"\"\"\n</code></pre>"},{"location":"api/core/#generator-class","title":"Generator Class","text":"<p>Handles AI-powered issue generation.</p> <pre><code>from jiragen.core import Generator\n\n\nclass Generator:\n    def __init__(\n        self, model: str = \"gpt-4\", temperature: float = 0.7, max_tokens: int = 2000\n    ):\n        \"\"\"Initialize the generator with model settings.\"\"\"\n\n    def generate(\n        self, title: str, context: List[str], template: Optional[str] = None\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Generate issue content using AI.\"\"\"\n</code></pre>"},{"location":"api/core/#issue-class","title":"Issue Class","text":"<p>Represents a JIRA issue with all its metadata.</p> <pre><code>from jiragen.core import Issue\n\n\nclass Issue:\n    def __init__(\n        self,\n        title: str,\n        description: str,\n        issue_type: str = \"Story\",\n        priority: Optional[str] = None,\n        labels: Optional[List[str]] = None,\n        components: Optional[List[str]] = None,\n    ):\n        \"\"\"Initialize an issue with its metadata.\"\"\"\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert issue to JIRA API format.\"\"\"\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"Issue\":\n        \"\"\"Create issue from JIRA API response.\"\"\"\n</code></pre>"},{"location":"api/core/#config-class","title":"Config Class","text":"<p>Manages application configuration.</p> <pre><code>from jiragen.core import Config\n\n\nclass Config:\n    @classmethod\n    def load(cls, path: Optional[str] = None) -&gt; \"Config\":\n        \"\"\"Load configuration from file.\"\"\"\n\n    def save(self, path: Optional[str] = None) -&gt; None:\n        \"\"\"Save configuration to file.\"\"\"\n\n    @property\n    def jira(self) -&gt; JiraConfig:\n        \"\"\"Get JIRA configuration section.\"\"\"\n\n    @property\n    def llm(self) -&gt; LLMConfig:\n        \"\"\"Get LLM configuration section.\"\"\"\n</code></pre>"},{"location":"api/core/#exceptions","title":"Exceptions","text":"<p>Custom exceptions for error handling.</p> <pre><code>from jiragen.core.exceptions import (\n    JiraGenError,\n    ConfigError,\n    JiraError,\n    GenerationError,\n    VectorStoreError,\n)\n\n\nclass JiraGenError(Exception):\n    \"\"\"Base exception for all JiraGen errors.\"\"\"\n\n\nclass ConfigError(JiraGenError):\n    \"\"\"Configuration related errors.\"\"\"\n\n\nclass JiraError(JiraGenError):\n    \"\"\"JIRA API related errors.\"\"\"\n\n\nclass GenerationError(JiraGenError):\n    \"\"\"AI generation related errors.\"\"\"\n\n\nclass VectorStoreError(JiraGenError):\n    \"\"\"Vector store related errors.\"\"\"\n</code></pre>"},{"location":"api/core/#vector-store","title":"Vector Store","text":"<p>Overview</p> <p>The Vector Store module handles the storage and retrieval of code embeddings, enabling semantic search over your codebase.</p>"},{"location":"api/core/#vectorstoreconfig","title":"VectorStoreConfig","text":""},{"location":"api/core/#jiragen.core.client.VectorStoreConfig","title":"jiragen.core.client.VectorStoreConfig","text":"<pre><code>VectorStoreConfig(**data)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Configuration for the vector store client and service.</p> <p>Attributes:</p> <ul> <li> <code>collection_name</code>               (<code>str</code>)           \u2013            <p>Default collection name</p> </li> <li> <code>embedding_model</code>               (<code>str</code>)           \u2013            <p>Name of the sentence transformer model to use</p> </li> <li> <code>device</code>               (<code>str</code>)           \u2013            <p>Device to run embeddings on ('cpu' or 'cuda')</p> </li> <li> <code>socket_path</code>               (<code>Optional[Path]</code>)           \u2013            <p>Unix socket path for client-service communication</p> </li> <li> <code>db_path</code>               (<code>Optional[Path]</code>)           \u2013            <p>Path to the vector store database</p> </li> </ul>"},{"location":"api/core/#vectorstoreclient","title":"VectorStoreClient","text":""},{"location":"api/core/#jiragen.core.client.VectorStoreClient","title":"jiragen.core.client.VectorStoreClient","text":"<pre><code>VectorStoreClient(config: VectorStoreConfig)\n</code></pre>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient-functions","title":"Functions","text":""},{"location":"api/core/#jiragen.core.client.VectorStoreClient.ensure_service_running","title":"ensure_service_running","text":"<pre><code>ensure_service_running() -&gt; None\n</code></pre> <p>Ensure the vector store service is running</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.start_service","title":"start_service","text":"<pre><code>start_service() -&gt; None\n</code></pre> <p>Start the vector store service</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.restart","title":"restart","text":"<pre><code>restart() -&gt; None\n</code></pre> <p>Restart the vector store service.</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.kill","title":"kill","text":"<pre><code>kill() -&gt; None\n</code></pre> <p>Kill the vector store service.</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.send_command","title":"send_command","text":"<pre><code>send_command(command: str, params: Dict[str, Any] = None, timeout: int = SOCKET_TIMEOUT, retries: int = MAX_RETRIES) -&gt; Dict[str, Any]\n</code></pre> <p>Send command to service with retries</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.initialize_store","title":"initialize_store","text":"<pre><code>initialize_store() -&gt; None\n</code></pre> <p>Initialize the vector store with initialization state verification.</p> <p>The initialization process: 1. Send initialize command with config 2. Verify store accessibility through get_stored_files 3. Confirm data structure integrity</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.get_stored_files","title":"get_stored_files","text":"<pre><code>get_stored_files() -&gt; Dict[str, Set[Path]]\n</code></pre> <p>Get stored files with robust validation and error handling.</p> <p>Returns:</p> <ul> <li> <code>Dict[str, Set[Path]]</code>           \u2013            <p>Dict[str, Set[Path]]: Dictionary containing: - 'files': Set of file paths - 'directories': Set of directory paths</p> </li> </ul>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.add_files","title":"add_files","text":"<pre><code>add_files(paths: List[Path]) -&gt; Set[Path]\n</code></pre> <p>Add files to vector store</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.remove_files","title":"remove_files","text":"<pre><code>remove_files(paths: List[Path]) -&gt; Set[Path]\n</code></pre> <p>Remove files from vector store</p>"},{"location":"api/core/#jiragen.core.client.VectorStoreClient.query_similar","title":"query_similar","text":"<pre><code>query_similar(text: str, n_results: int = 5) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Query similar documents</p>"},{"location":"api/core/#vectorstoreservice","title":"VectorStoreService","text":""},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService","title":"jiragen.services.vector_store.VectorStoreService","text":"<pre><code>VectorStoreService(socket_path: Path, runtime_dir: Path)\n</code></pre>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService-functions","title":"Functions","text":""},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.initialize_store","title":"initialize_store","text":"<pre><code>initialize_store(config: Dict[str, Any]) -&gt; None\n</code></pre> <p>Initialize the vector store with the given configuration</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.handle_add_files","title":"handle_add_files","text":"<pre><code>handle_add_files(params: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Handle adding files to the vector store</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.handle_remove_files","title":"handle_remove_files","text":"<pre><code>handle_remove_files(params: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Handle removing files from the vector store</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.handle_get_stored_files","title":"handle_get_stored_files","text":"<pre><code>handle_get_stored_files(params: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Handle retrieving stored files information</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.handle_query_similar","title":"handle_query_similar","text":"<pre><code>handle_query_similar(params: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Handle querying similar documents</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.handle_client","title":"handle_client","text":"<pre><code>handle_client(conn: socket.socket) -&gt; None\n</code></pre> <p>Handle a client connection</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.handle_shutdown","title":"handle_shutdown","text":"<pre><code>handle_shutdown(signum, frame) -&gt; None\n</code></pre> <p>Handle shutdown signal</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Clean up resources</p>"},{"location":"api/core/#jiragen.services.vector_store.VectorStoreService.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the service</p>"},{"location":"api/core/#generator","title":"Generator","text":"<p>Overview</p> <p>The Generator module is responsible for generating ticket content using AI models and managing the generation process.</p>"},{"location":"api/core/#llmconfig","title":"LLMConfig","text":""},{"location":"api/core/#jiragen.core.generator.LLMConfig","title":"jiragen.core.generator.LLMConfig","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/core/#jiragen.core.generator.LLMConfig-functions","title":"Functions","text":""},{"location":"api/core/#jiragen.core.generator.LLMConfig.set_api_base","title":"set_api_base","text":"<pre><code>set_api_base() -&gt; LLMConfig\n</code></pre> <p>Set default API base if not provided, based on model provider</p>"},{"location":"api/core/#litellmclient","title":"LiteLLMClient","text":""},{"location":"api/core/#jiragen.core.generator.LiteLLMClient","title":"jiragen.core.generator.LiteLLMClient","text":"<pre><code>LiteLLMClient(config: LLMConfig)\n</code></pre>"},{"location":"api/core/#issuegenerator","title":"IssueGenerator","text":""},{"location":"api/core/#jiragen.core.generator.IssueGenerator","title":"jiragen.core.generator.IssueGenerator","text":"<pre><code>IssueGenerator(vector_store: VectorStoreClient, config: GeneratorConfig)\n</code></pre> <p>Generator for creating JIRA tickets using both JIRA and codebase context.</p> <p>Uses RAG (Retrieval Augmented Generation) to find relevant context from both JIRA history and codebase, then generates a ticket following a template.</p> <p>Attributes:</p> <ul> <li> <code>vector_store</code>           \u2013            <p>Vector store client for retrieving similar documents</p> </li> <li> <code>config</code>           \u2013            <p>Generator configuration</p> </li> </ul>"},{"location":"api/core/#jiragen.core.generator.IssueGenerator-functions","title":"Functions","text":""},{"location":"api/core/#jiragen.core.generator.IssueGenerator.generate","title":"generate","text":"<pre><code>generate(message: str) -&gt; str\n</code></pre> <p>Generate a JIRA ticket using RAG and template-guided generation.</p> <p>Retrieves relevant context from both JIRA history and codebase, then uses an LLM to generate a ticket following the template.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>User's request for the ticket</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Generated ticket content following the template</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If ticket generation fails</p> </li> </ul>"},{"location":"api/core/#metadata","title":"Metadata","text":"<p>Overview</p> <p>The Metadata module handles JIRA issue metadata, including issue types, priorities, and field validation.</p> <p>Usage Example</p> <pre><code>from jiragen.core.metadata import IssueMetadata, IssueType, IssuePriority\n\n# Create metadata for a new feature\nmetadata = IssueMetadata(\n    issue_type=IssueType.STORY,\n    priority=IssuePriority.HIGH,\n    labels=[\"feature\", \"ui\"],\n    components=[\"frontend\"],\n    story_points=5,\n)\n</code></pre>"},{"location":"api/core/#issuetype","title":"IssueType","text":""},{"location":"api/core/#jiragen.core.metadata.IssueType","title":"jiragen.core.metadata.IssueType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/core/#issuepriority","title":"IssuePriority","text":""},{"location":"api/core/#jiragen.core.metadata.IssuePriority","title":"jiragen.core.metadata.IssuePriority","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/core/#issuemetadata","title":"IssueMetadata","text":""},{"location":"api/core/#jiragen.core.metadata.IssueMetadata","title":"jiragen.core.metadata.IssueMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the metadata extracted from an issue's content.</p>"},{"location":"api/core/#issuemetadataextractor","title":"IssueMetadataExtractor","text":""},{"location":"api/core/#jiragen.core.metadata.IssueMetadataExtractor","title":"jiragen.core.metadata.IssueMetadataExtractor","text":"<pre><code>IssueMetadataExtractor(llm_config: LLMConfig)\n</code></pre> <p>Extracts metadata from issue content using LLM analysis.</p>"},{"location":"api/core/#jiragen.core.metadata.IssueMetadataExtractor-functions","title":"Functions","text":""},{"location":"api/core/#jiragen.core.metadata.IssueMetadataExtractor.extract_metadata","title":"extract_metadata","text":"<pre><code>extract_metadata(content: str) -&gt; IssueMetadata\n</code></pre> <p>Analyzes the issue content and extracts relevant metadata.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>str</code>)           \u2013            <p>The generated issue content to analyze</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>IssueMetadata</code>           \u2013            <p>IssueMetadata object containing the extracted metadata</p> </li> </ul>"},{"location":"api/core/#config","title":"Config","text":"<p>Overview</p> <p>The Config module manages application configuration, including JIRA credentials and default settings.</p> <p>Environment Variables</p> <p>Configuration can also be set using environment variables: <pre><code>export JIRA_URL=https://your-domain.atlassian.net\nexport JIRA_USERNAME=your-email@example.com\nexport JIRA_API_TOKEN=your-api-token\n</code></pre></p>"},{"location":"api/core/#configmanager","title":"ConfigManager","text":""},{"location":"api/core/#jiragen.core.config.ConfigManager","title":"jiragen.core.config.ConfigManager","text":"<pre><code>ConfigManager(config_path: Optional[Path] = None)\n</code></pre> <p>Manages jiragen configuration.</p> <p>Parameters:</p> <ul> <li> <code>config_path</code>               (<code>Optional[Path]</code>, default:                   <code>None</code> )           \u2013            <p>Optional path to config file. If not provided,        defaults to standard config location based on OS.</p> </li> </ul>"},{"location":"api/core/#jiragen.core.config.ConfigManager-functions","title":"Functions","text":""},{"location":"api/core/#jiragen.core.config.ConfigManager.create_default_config","title":"create_default_config","text":"<pre><code>create_default_config() -&gt; None\n</code></pre> <p>Create default configuration file.</p>"},{"location":"api/core/#jiragen.core.config.ConfigManager.load_config","title":"load_config","text":"<pre><code>load_config() -&gt; None\n</code></pre> <p>Load configuration from file.</p>"},{"location":"api/core/#jiragen.core.config.ConfigManager.update_config","title":"update_config","text":"<pre><code>update_config(section: str, **kwargs) -&gt; None\n</code></pre> <p>Update configuration values.</p>"},{"location":"assets/","title":"Index","text":"<p>Icons sourced from IconDuck, a comprehensive open-source icon library.</p>"},{"location":"cli/","title":"CLI Overview","text":"<p>JiraGen provides a powerful command-line interface for managing JIRA issue generation and codebase integration. This section covers all available commands and their usage.</p>"},{"location":"cli/#command-structure","title":"Command Structure","text":"<pre><code>jiragen [command] [options] [arguments]\n</code></pre>"},{"location":"cli/#available-commands","title":"Available Commands","text":"<ul> <li><code>init</code>: Initialize JiraGen in your project</li> <li><code>generate</code>: Generate JIRA issues with AI assistance</li> <li><code>add</code>: Add files to the vector store</li> <li><code>rm</code>: Remove files from the vector store</li> <li><code>fetch</code>: Fetch JIRA data</li> <li><code>status</code>: Check vector store status</li> <li><code>upload</code>: Upload issues to JIRA</li> <li><code>restart</code>: Restart the vector store service</li> </ul> <p>See the following sections for detailed documentation on each command.</p>"},{"location":"cli/#global-options","title":"Global Options","text":"<ul> <li><code>--verbose</code>: Enable detailed logging</li> <li><code>--config PATH</code>: Use custom config file</li> <li><code>--help</code>: Show command help</li> </ul>"},{"location":"cli/#command-categories","title":"Command Categories","text":""},{"location":"cli/#basic-commands","title":"Basic Commands","text":"<p>Core commands for managing JiraGen's configuration and basic operations: - <code>init</code>: Initialize JiraGen configuration - <code>status</code>: Display vector store status - <code>restart</code>: Restart vector store service - <code>clean</code>: Clean vector store database</p>"},{"location":"cli/#codebase-management","title":"Codebase Management","text":"<p>Commands for managing your codebase in the vector store: - <code>add</code>: Add files to vector store (with gitignore support) - <code>rm</code>: Remove files from vector store - <code>fetch</code>: Fetch JIRA data for context</p>"},{"location":"cli/#issue-generation","title":"Issue Generation","text":"<p>Commands for generating and managing JIRA issues: - <code>generate</code>: Generate issues with AI assistance - <code>upload</code>: Upload issues to JIRA</p>"},{"location":"cli/#jira-integration","title":"JIRA Integration","text":"<p>Commands for interacting with JIRA: - <code>fetch</code>: Fetch JIRA data - <code>upload</code>: Upload issues - <code>sync</code>: Synchronize local and remote data</p>"},{"location":"cli/#common-workflows","title":"Common Workflows","text":""},{"location":"cli/#1-initial-setup","title":"1. Initial Setup","text":"<pre><code># Initialize JiraGen\njiragen init\n\n# Add your codebase\njiragen add .\n\n# Fetch JIRA data for context\njiragen fetch --types all\n</code></pre>"},{"location":"cli/#2-issue-generation","title":"2. Issue Generation","text":"<pre><code># Generate a new issue\njiragen generate \"Add dark mode support\"\n\n# Generate and upload directly\njiragen generate \"Fix memory leak\" --upload --yes\n</code></pre>"},{"location":"cli/#3-codebase-updates","title":"3. Codebase Updates","text":"<pre><code># Add new files\njiragen add src/new_feature/\n\n# Remove old files\njiragen rm src/deprecated/\n\n# Check status\njiragen status --compact\n</code></pre>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"<p>JiraGen commands return these exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: General error or operation cancelled by user</li> <li><code>2</code>: Configuration error</li> <li><code>3</code>: Network error</li> <li><code>4</code>: Permission error</li> </ul>"},{"location":"cli/basic/","title":"Basic Commands","text":"<p>This section covers the essential commands you'll use most frequently with JiraGen.</p>"},{"location":"cli/basic/#global-options","title":"Global Options","text":"<p>All JiraGen commands support these global options:</p> <pre><code>--verbose            : Enable detailed logging\n--config PATH       : Specify custom config file location\n--help              : Display command help\n</code></pre>"},{"location":"cli/basic/#init","title":"init","text":"<p>Initialize JiraGen in your project:</p> <pre><code>jiragen init [OPTIONS]\n</code></pre> <p>Options: - <code>--force</code>: Overwrite existing configuration - <code>--skip-validation</code>: Skip JIRA connection validation</p> <p>The init command: 1. Creates necessary directories 2. Generates default configuration 3. Validates JIRA connection 4. Sets up vector store</p>"},{"location":"cli/basic/#status","title":"status","text":"<p>Check the status of your vector store and JIRA synchronization:</p> <pre><code>jiragen status [OPTIONS]\n</code></pre> <p>Options: - <code>--compact</code>: Show compact view - <code>--depth INT</code>: Maximum directory depth to display</p> <p>Example output: <pre><code>\ud83d\udcca Vector Store Status\nFiles indexed: 156\nLast updated: 2024-01-22 12:30:45\nSize: 25.4 MB\n\n\ud83d\udd04 JIRA Sync Status\nLast sync: 2024-01-22 12:00:00\nIssues cached: 234\nComponents: 12\n</code></pre></p>"},{"location":"cli/basic/#restart","title":"restart","text":"<p>Restart the vector store service:</p> <pre><code>jiragen restart [OPTIONS]\n</code></pre> <p>Options: - <code>--hard</code>: Clear cache before restart - <code>--timeout SEC</code>: Maximum wait time (default: 30)</p> <p>Use this command if you experience: - Connection issues - Performance degradation - Unexpected behavior</p>"},{"location":"cli/basic/#clean","title":"clean","text":"<p>Remove all files from the vector store database.</p> <pre><code>jiragen clean\n</code></pre> <p>Example output: <pre><code>\ud83d\uddd1\ufe0f  Cleaning vector store...\n\u2728 Vector store cleaned successfully\n</code></pre></p>"},{"location":"cli/codebase/","title":"Codebase Management","text":"<p>This section covers commands for managing your codebase in the vector store.</p>"},{"location":"cli/codebase/#add","title":"add","text":"<p>Add files to the vector store database. Supports .gitignore patterns and recursive directory scanning.</p> <pre><code>jiragen add PATH [PATH...]\n\nArguments:\n  PATH               : One or more files or directories to add to the database\n                      Use \".\" to add all files in current directory recursively\n                      Use \"*\" to add all files in current directory only\n                      Use specific paths for individual files or directories\n</code></pre>"},{"location":"cli/codebase/#features","title":"Features","text":"<ul> <li>Gitignore Support: Automatically respects .gitignore patterns</li> <li>Progress Tracking: Shows progress bar and statistics</li> <li>Tree View: Visual display of added files</li> <li>Directory Scanning: Recursive scanning of directories</li> <li>Pattern Matching: Supports glob patterns</li> </ul>"},{"location":"cli/codebase/#examples","title":"Examples","text":"<pre><code># Add all files recursively (respects .gitignore)\njiragen add .\n\n# Add specific files\njiragen add src/main.py tests/test_api.py\n\n# Add all files in a specific directory\njiragen add src/\n\n# Add all Python files in current directory\njiragen add *.py\n</code></pre> <p>Example output: <pre><code>\ud83d\udcc1 Added Files\n\u251c\u2500\u2500 src/main.py\n\u251c\u2500\u2500 src/utils/helper.py\n\u2514\u2500\u2500 tests/test_api.py\n\nSuccessfully added 3 files (52.7 files/second)\n</code></pre></p>"},{"location":"cli/codebase/#rm-remove","title":"rm (remove)","text":"<p>Remove files from the vector store database.</p> <pre><code>jiragen rm PATH [PATH...]\n\nArguments:\n  PATH               : One or more files or directories to remove\n                      Supports the same patterns as the add command\n</code></pre>"},{"location":"cli/codebase/#examples_1","title":"Examples","text":"<pre><code># Remove specific files\njiragen rm src/deprecated.py\n\n# Remove all files in a directory\njiragen rm old_code/\n\n# Remove files matching a pattern\njiragen rm *.tmp\n</code></pre> <p>Example output: <pre><code>\ud83d\uddd1\ufe0f  Removed Files\n\u251c\u2500\u2500 src/deprecated.py\n\u2514\u2500\u2500 old_code/helper.py\n\nSuccessfully removed 2 files\n</code></pre></p>"},{"location":"cli/codebase/#fetch","title":"fetch","text":"<p>Fetch JIRA data and store it in a separate vector store.</p> <pre><code>jiragen fetch [OPTIONS]\n\nOptions:\n  --types TYPE [TYPE...]  : Types of data to fetch (default: tickets, epics)\n                           Available types: epics, tickets, components\n                           Use 'all' to fetch everything\n</code></pre>"},{"location":"cli/codebase/#examples_2","title":"Examples","text":"<pre><code># Fetch all JIRA data types\njiragen fetch --types all\n\n# Fetch specific types\njiragen fetch --types epics tickets\n</code></pre> <p>Example output: <pre><code>    JIRA Fetch Statistics\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Type       \u2503 Items Fetched \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Epics      \u2502            12 \u2502\n\u2502 Tickets    \u2502           156 \u2502\n\u2502 Components \u2502             8 \u2502\n\u2502 Total      \u2502           176 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2728 Fetch completed successfully!\n\u23f1\ufe0f  Time taken: 5.23 seconds\n\ud83d\udcc1 Data stored in: ~/.local/share/jiragen/jira_data\n</code></pre></p> <p>The fetched data is stored in the system's data directory following the XDG Base Directory specification:</p> <p>Unix-like Systems (Linux, macOS): - <code>~/.local/share/jiragen/jira_data/epics/</code> - <code>~/.local/share/jiragen/jira_data/tickets/</code> - <code>~/.local/share/jiragen/jira_data/components/</code></p> <p>Windows: - <code>%LOCALAPPDATA%\\jiragen\\jira_data\\epics\\</code> - <code>%LOCALAPPDATA%\\jiragen\\jira_data\\tickets\\</code> - <code>%LOCALAPPDATA%\\jiragen\\jira_data\\components\\</code></p> <p>Each item is stored in both JSON and Markdown formats for easy viewing and processing.</p>"},{"location":"cli/generate/","title":"Issue Generation","text":"<p>This section covers commands for generating and managing JIRA issues using AI assistance.</p>"},{"location":"cli/generate/#generate","title":"generate","text":"<p>Generate JIRA issues with AI-powered context from your codebase.</p> <pre><code>jiragen generate MESSAGE [OPTIONS]\n</code></pre>"},{"location":"cli/generate/#arguments","title":"Arguments","text":"<ul> <li><code>MESSAGE</code>: Description of the issue to generate (required)</li> </ul>"},{"location":"cli/generate/#options","title":"Options","text":"<ul> <li><code>-t, --template PATH</code>: Path to template file (default: <code>default.md</code>)</li> <li><code>-m, --model NAME</code>: LLM model to use (default: <code>gpt-4</code>)</li> <li><code>--temperature FLOAT</code>: Model temperature (0.0-1.0) (default: 0.7)</li> <li><code>--max-tokens INT</code>: Maximum tokens to generate (default: 2000)</li> <li><code>-e, --editor</code>: Open editor for manual editing</li> <li><code>-u, --upload</code>: Upload issue to JIRA after generation</li> <li><code>-y, --yes</code>: Skip all confirmations and use defaults</li> <li><code>--epic KEY</code>: Link to epic (e.g., <code>PROJ-123</code>)</li> <li><code>--type TYPE</code>: Issue type (default: Story)</li> <li><code>--priority PRIORITY</code>: Issue priority</li> <li><code>--labels LABELS</code>: Comma-separated labels</li> <li><code>--components COMPONENTS</code>: Comma-separated components</li> </ul>"},{"location":"cli/generate/#interactive-workflow","title":"Interactive Workflow","text":"<ol> <li> <p>Content Generation:    <pre><code>$ jiragen generate \"Add dark mode support\"\n\n\ud83d\udd0d Searching codebase for context...\n\u2728 Generating issue content...\n\n# Add dark mode support\n\n## Description\nImplement dark mode theme support across the application...\n\nWould you like to edit the content? [Y/n]:\n</code></pre></p> </li> <li> <p>Metadata Extraction:    <pre><code>Generated Metadata:\n- Type: Feature\n- Priority: Medium\n- Labels: frontend, UI, theme\n- Components: UI\n- Story Points: 5\n\nWould you like to modify the metadata? [y/N]:\n</code></pre></p> </li> <li> <p>JIRA Upload (with <code>-u</code>):    <pre><code>Do you want to upload this issue to JIRA? [Y/n]:\n\u2713 Created JIRA issue: PROJ-456\n</code></pre></p> </li> </ol>"},{"location":"cli/generate/#examples","title":"Examples","text":"<pre><code># Basic generation\njiragen generate \"Add user authentication\"\n\n# Generate with custom template\njiragen generate \"Fix memory leak\" --template bug.md\n\n# Generate and upload with specific metadata\njiragen generate \"Add OAuth support\" \\\n  --upload \\\n  --type Feature \\\n  --priority High \\\n  --labels \"security,auth\" \\\n  --components \"Backend\"\n\n# Generate and upload automatically\njiragen generate \"Update dependencies\" --upload --yes\n\n# Generate with custom model settings\njiragen generate \"Optimize database queries\" \\\n  --model gpt-4 \\\n  --temperature 0.8 \\\n  --max-tokens 2500\n</code></pre>"},{"location":"cli/generate/#best-practices","title":"Best Practices","text":"<ol> <li>Message Format:</li> <li>Be clear and concise</li> <li>Include key requirements</li> <li> <p>Specify the scope</p> </li> <li> <p>Template Selection:</p> </li> <li>Use <code>bug.md</code> for bugs</li> <li>Use <code>feature.md</code> for features</li> <li> <p>Create custom templates for specific needs</p> </li> <li> <p>Metadata Management:</p> </li> <li>Review extracted metadata</li> <li>Adjust priorities appropriately</li> <li> <p>Use consistent labeling</p> </li> <li> <p>Interactive Mode:</p> </li> <li>Review generated content</li> <li>Verify technical details</li> <li>Check acceptance criteria</li> </ol>"},{"location":"cli/jira/","title":"JIRA Integration","text":"<p>This section covers commands for interacting with JIRA, including fetching data and uploading issues.</p>"},{"location":"cli/jira/#fetch","title":"fetch","text":"<p>Fetch JIRA data to provide context for issue generation.</p> <pre><code>jiragen fetch [OPTIONS]\n</code></pre>"},{"location":"cli/jira/#options","title":"Options","text":"<ul> <li><code>--types TYPE [TYPE...]</code>: Types of data to fetch (default: <code>tickets,epics</code>)</li> <li>Available types: <code>epics</code>, <code>tickets</code>, <code>components</code></li> <li>Use <code>all</code> to fetch everything</li> <li><code>--project KEY</code>: Specific project to fetch from</li> <li><code>--since DAYS</code>: Only fetch issues updated in last N days</li> <li><code>--limit N</code>: Maximum number of items to fetch</li> <li><code>--force</code>: Force refresh cached data</li> </ul>"},{"location":"cli/jira/#examples","title":"Examples","text":"<pre><code># Fetch all data types\njiragen fetch --types all\n\n# Fetch specific types\njiragen fetch --types epics tickets\n\n# Fetch recent issues from a project\njiragen fetch --project PROJ --since 30\n\n# Force refresh with limit\njiragen fetch --types all --force --limit 1000\n</code></pre>"},{"location":"cli/jira/#output-format","title":"Output Format","text":"<pre><code>    JIRA Fetch Statistics\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Type       \u2503 Items Fetched \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Epics      \u2502            12 \u2502\n\u2502 Tickets    \u2502           156 \u2502\n\u2502 Components \u2502             8 \u2502\n\u2502 Total      \u2502           176 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"cli/jira/#upload","title":"upload","text":"<p>Upload issues directly to JIRA.</p> <pre><code>jiragen upload [OPTIONS]\n</code></pre>"},{"location":"cli/jira/#required-options","title":"Required Options","text":"<ul> <li><code>--title TEXT</code>: Issue title/summary</li> </ul>"},{"location":"cli/jira/#optional-options","title":"Optional Options","text":"<ul> <li><code>--description TEXT</code>: Issue description (supports markdown)</li> <li><code>--type TEXT</code>: Issue type (Story, Bug, Task, Epic, etc.)</li> <li><code>--epic KEY</code>: Epic key to link to (e.g., <code>PROJ-123</code>)</li> <li><code>--component TEXT</code>: Component name</li> <li><code>--priority TEXT</code>: Priority level</li> <li><code>--labels TEXT</code>: Comma-separated labels</li> <li><code>--assignee TEXT</code>: Assignee username</li> <li><code>--reporter TEXT</code>: Reporter username</li> <li><code>--project KEY</code>: Project key (overrides default)</li> </ul>"},{"location":"cli/jira/#examples_1","title":"Examples","text":"<pre><code># Upload basic issue\njiragen upload --title \"Add user authentication\"\n\n# Upload with full metadata\njiragen upload \\\n  --title \"Implement OAuth2\" \\\n  --type Feature \\\n  --description \"Add OAuth2 authentication support\" \\\n  --epic PROJ-100 \\\n  --component Backend \\\n  --priority High \\\n  --labels \"security,auth\" \\\n  --assignee \"john.doe\"\n\n# Upload from file\njiragen upload --from-file issue.md\n</code></pre>"},{"location":"cli/jira/#sync","title":"sync","text":"<p>Synchronize local and remote JIRA data.</p> <pre><code>jiragen sync [OPTIONS]\n</code></pre>"},{"location":"cli/jira/#options_1","title":"Options","text":"<ul> <li><code>--direction</code>: Sync direction (<code>pull</code>, <code>push</code>, <code>both</code>)</li> <li><code>--types</code>: Data types to sync</li> <li><code>--dry-run</code>: Show what would be synced</li> <li><code>--force</code>: Force sync even if no changes detected</li> </ul>"},{"location":"cli/jira/#examples_2","title":"Examples","text":"<pre><code># Full sync\njiragen sync\n\n# Pull only\njiragen sync --direction pull\n\n# Dry run\njiragen sync --dry-run\n\n# Force sync specific types\njiragen sync --types epics,components --force\n</code></pre>"},{"location":"cli/jira/#best-practices","title":"Best Practices","text":"<ol> <li>Data Freshness:</li> <li>Run <code>fetch</code> regularly to keep context updated</li> <li>Use <code>--since</code> to fetch recent changes</li> <li> <p>Consider setting up automated sync</p> </li> <li> <p>Upload Strategy:</p> </li> <li>Review generated content before upload</li> <li>Use consistent metadata</li> <li> <p>Link related issues appropriately</p> </li> <li> <p>Project Organization:</p> </li> <li>Use epics for grouping related issues</li> <li>Apply consistent labeling</li> <li> <p>Assign components correctly</p> </li> <li> <p>Performance:</p> </li> <li>Use <code>--limit</code> for large projects</li> <li>Cache data when possible</li> <li>Schedule bulk operations off-peak ```</li> </ol>"}]}